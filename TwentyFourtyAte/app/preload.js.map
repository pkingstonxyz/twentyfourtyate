{"version":3,"sources":["preload.cljs"],"mappings":";AAMA,GAAA,QAAAA,oCAAAC;AAAA;AAAA,AAAA,AAASC,oCACP;AAAI,AAACC;;AAAL;;;;AAQF,GAAA,QAAAH,oCAAAI;AAAA;AAAA,AAAA,AAASC,qDACP;AAAI,gDAAUC,7CAAiB,6CAAA,+CAAA,5FAACC;AAA5B,AACMC,AAA+B,AAAA,kFAAA;;AADrC;;AAAJ;;;;AAKF,kBAAA,lBAAgCC;AAAhC,AACE,OAACC;;;AAGH,uBAAA,+BAAAC,tDAAeI;AAAf,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAqCI;aAArC,AAAAF,4CAAAF,eAAA,pEAA0CK;AAA1C,AACE,GAAM,6CAAA,7CAACV,qHAAiBS;AAAxB,AACE,OAACE,cAAiB,KAAAC,MAAWF;;AAD/B","names":["js/preload","js/preload.__init-fast-refresh!","preload/__init-fast-refresh!","uix.dev/init-fast-refresh!","js/preload.__disable-react-native-hot-reloading!","preload/__disable-react-native-hot-reloading!","js/shadow.js.shim.module$react_native.Platform","cljs.core._EQ_","js/shadow.js.shim.module$react_native.NativeModules","preload/refresh","uix.dev/refresh!","p__27700","map__27701","cljs.core/--destructure-map","cljs.core.get","preload/build-notify","type","report","js/console.error","js/Error"],"sourcesContent":["(ns preload\n    (:require [react-native :as rn]\n              [uix.dev]))\n\n;; Initializes fast-refresh runtime.\n#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}\n(defonce __init-fast-refresh!\n  (do (uix.dev/init-fast-refresh!)\n      nil))\n\n;; Programatically disabled React Native's hot reloading\n;; Only on iOS, because:\n;; - On Android there's bug that causes an infinite reload loop when calling `setHotLoadingEnabled`\n;; - On Web `setHotLoadingEnabled` is not available\n#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}\n(defonce __disable-react-native-hot-reloading!\n  (do (when (-> rn/Platform .-OS (= \"ios\"))\n        (-> rn/NativeModules .-DevSettings (.setHotLoadingEnabled false)))\n      nil))\n\n;; Called by shadow-cljs after every reload.\n(defn ^:export ^:dev/after-load refresh []\n  (uix.dev/refresh!))\n\n;; Forwards cljs build errors to React Native's error view\n(defn ^:export build-notify [{:keys [type report]}]\n  (when (= :build-failure type)\n    (js/console.error (js/Error. report))))\n"]}