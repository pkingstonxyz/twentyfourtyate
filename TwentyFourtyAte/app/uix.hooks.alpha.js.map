{"version":3,"sources":["uix/hooks/alpha.cljs"],"mappings":"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","names":["uix.hooks.alpha/clojure-primitive?","v","cljs.core/Keyword","cljs.core/uuid?","cljs.core/Symbol","uix.hooks.alpha/choose-value","nv","cv","cljs.core._EQ_","uix.hooks.alpha/use-clojure-primitive-aware-updater","updater","js/shadow.js.shim.module$react.useCallback","G__28100","cljs.core/fn?","uix.hooks.alpha/use-state","value","vec__28103","cljs.core.nth","state","set-state","js/shadow.js.shim.module$react.useState","uix.hooks.alpha/clojure-primitive-aware-reducer-updater","f","action","var_args","G__28134","uix.hooks.alpha/use-reducer","js/Error","js/shadow.js.shim.module$react.useReducer","init-state","uix.hooks.alpha/use-ref","js/shadow.js.shim.module$react.useRef","uix.hooks.alpha/with-return-value-check","ret","js/undefined","G__28142","uix.hooks.alpha/use-effect","setup-fn","js/shadow.js.shim.module$react.useEffect","deps","G__28145","uix.hooks.alpha/use-layout-effect","js/shadow.js.shim.module$react.useLayoutEffect","G__28147","uix.hooks.alpha/use-insertion-effect","js/shadow.js.shim.module$react.useInsertionEffect","uix.hooks.alpha/use-callback","uix.hooks.alpha/use-memo","js/shadow.js.shim.module$react.useMemo","uix.hooks.alpha/use-context","js/shadow.js.shim.module$react.useContext","G__28158","uix.hooks.alpha/use-imperative-handle","ref","create-handle","js/shadow.js.shim.module$react.useImperativeHandle","G__28164","uix.hooks.alpha/use-debug","uix.hooks.alpha.use_debug","fmt","js/shadow.js.shim.module$react.useDebugValue","uix.hooks.alpha/use-deferred-value","js/shadow.js.shim.module$react.useDeferredValue","uix.hooks.alpha/use-transition","js/shadow.js.shim.module$react.useTransition","uix.hooks.alpha/use-id","js/shadow.js.shim.module$react.useId","G__28166","uix.hooks.alpha/use-sync-external-store","subscribe","get-snapshot","js/shadow.js.shim.module$react.useSyncExternalStore","get-server-snapshot"],"sourcesContent":["(ns uix.hooks.alpha\n  \"Wrappers for React Hooks\"\n  (:require [react :as r]))\n\n(defn- clojure-primitive? [v]\n  (or (keyword? v)\n      (uuid? v)\n      (symbol? v)))\n\n(defn- choose-value [nv cv]\n  (if (and (clojure-primitive? nv) (= nv cv))\n    cv\n    nv))\n\n(defn- use-clojure-primitive-aware-updater\n  \"Replicates React's behaviour when updating state with identical primitive JS type,\n  but for keywords, UUIDs and symbols that are in fact non-primitives\"\n  [updater]\n  (react/useCallback\n   (fn [v]\n     (updater\n      (fn [cv]\n        (if (fn? v)\n          (choose-value (v cv) cv)\n          (choose-value v cv)))))\n   #js [updater]))\n\n;; == State hook ==\n\n(defn use-state [value]\n  (let [[state set-state] (r/useState value)\n        set-state (use-clojure-primitive-aware-updater set-state)]\n    #js [state set-state]))\n\n(defn- clojure-primitive-aware-reducer-updater\n  \"Same as `use-clojure-primitive-aware-updater` but for `use-reducer`\"\n  [f]\n  (fn [state action]\n    (choose-value (f state action) state)))\n\n(defn use-reducer\n  ([f value]\n   (let [updater (clojure-primitive-aware-reducer-updater f)]\n     (r/useReducer updater value)))\n  ([f value init-state]\n   (let [updater (clojure-primitive-aware-reducer-updater f)]\n     (r/useReducer updater value init-state))))\n\n;; == Ref hook\n\n(defn use-ref [value]\n  (r/useRef value))\n\n;; == Effect hook ==\n(defn with-return-value-check [f]\n  #(let [ret (f)]\n     (if (fn? ret) ret js/undefined)))\n\n(defn use-effect\n  ([setup-fn]\n   (r/useEffect (with-return-value-check setup-fn)))\n  ([setup-fn deps]\n   (r/useEffect\n    (with-return-value-check setup-fn)\n    deps)))\n\n;; == Layout effect hook ==\n(defn use-layout-effect\n  ([setup-fn]\n   (r/useLayoutEffect\n    (with-return-value-check setup-fn)))\n  ([setup-fn deps]\n   (r/useLayoutEffect\n    (with-return-value-check setup-fn)\n    deps)))\n\n;; == Insertion effect hook ==\n(defn use-insertion-effect\n  ([f]\n   (r/useInsertionEffect\n    (with-return-value-check f)))\n  ([f deps]\n   (r/useInsertionEffect\n    (with-return-value-check f)\n    deps)))\n\n;; == Callback hook ==\n(defn use-callback\n  [f deps]\n  (r/useCallback f deps))\n\n;; == Memo hook ==\n(defn use-memo\n  [f deps]\n  (r/useMemo f deps))\n\n;; == Context hook ==\n(defn use-context [v]\n  (r/useContext v))\n\n;; == Imperative Handle hook ==\n(defn use-imperative-handle\n  ([ref create-handle]\n   (r/useImperativeHandle ref create-handle))\n  ([ref create-handle deps]\n   (r/useImperativeHandle ref create-handle deps)))\n\n;; == Debug hook ==\n(defn use-debug\n  ([v]\n   (use-debug v nil))\n  ([v fmt]\n   (r/useDebugValue v fmt)))\n\n(defn use-deferred-value [v]\n  (r/useDeferredValue v))\n\n(defn use-transition []\n  (r/useTransition))\n\n(defn use-id []\n  (r/useId))\n\n(defn use-sync-external-store\n  ([subscribe get-snapshot]\n   (r/useSyncExternalStore subscribe get-snapshot))\n  ([subscribe get-snapshot get-server-snapshot]\n   (r/useSyncExternalStore subscribe get-snapshot get-server-snapshot)))\n"],"x_google_ignoreList":[0]}