{"version":3,"sources":["app/merge.cljs"],"mappings":"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","names":["app.merge/can-merge","a","b","cljs.core._EQ_","p__38009","vec__38010","cljs.core.nth","app.merge/generate-row-moves","c0","c1","c2","c3","row","ocr-38013","ocr-38014","ocr-38015","ocr-38016","cljs.core.match/backtrack","e38042","js/Error","e__27667__auto__","e38040","e38041","e38037","e38039","e38038","e38021","e38036","e38034","e38035","e38022","e38032","e38033","e38023","e38029","e38030","e38031","e38024","e38025","e38026","e38027","e38028","c","d","app.merge/sub3","n","app.merge/fix-right","transform","cljs.core.update_in","app.merge/fix-up","vec__38043","vec__38046","fr","fc","tr","tc","cljs.core.assoc","app.merge/transpose","m","cljs.core.apply","cljs.core/mapv","cljs.core/vector","app.merge/generate-board-moves","board","direction","G__38049","cljs.core/Keyword","cljs.core/flatten","cljs.core.filter","cljs.core/identity","cljs.core.map_indexed","idx","cljs.core.map","cljs.core/reverse"],"sourcesContent":["(ns app.merge\n  (:require [cljs.core.match :refer-macros [match]]))\n\n(defn can-merge [a b]\n  (and (number? a) (number? b) (= a b)))\n\n(defn generate-row-moves [[c0 c1 c2 c3] row]\n  (match [(:tileval c0) (:tileval c1) (:tileval c2) (:tileval c3)]\n         [0 0 0 0] nil\n         ; 1 tile\n         [a 0 0 0] nil\n         [0 a 0 0] {:from [row 1] :to [row 0] :merged false}\n         [0 0 a 0] {:from [row 2] :to [row 0] :merged false}\n         [0 0 0 a] {:from [row 3] :to [row 0] :merged false}\n         ; 2 tiles\n         [a b 0 0] (cond (can-merge a b) {:from [row 1] :to [row 0] :merged true}\n                         :else   nil)\n         [a 0 b 0] (cond (can-merge a b) {:from [row 2] :to [row 0] :merged true}\n                         :else   {:from [row 2] :to [row 1] :merged false})\n         [a 0 0 b] (cond (can-merge a b) {:from [row 3] :to [row 0] :merged true}\n                         :else   {:from [row 3] :to [row 1] :merged false})\n         [0 a b 0] (cond (can-merge a b) [{:from [row 1] :to [row 0] :merged false}\n                                          {:from [row 2] :to [row 0] :merged true}]\n                         :else   [{:from [row 1] :to [row 0] :merged false} \n                                  {:from [row 2] :to [row 1] :merged false}])\n         [0 a 0 b] (cond (can-merge a b) [{:from [row 1] :to [row 0] :merged false}\n                                          {:from [row 3] :to [row 0] :merged true}]\n                         :else   [{:from [row 1] :to [row 0] :merged false}\n                                  {:from [row 3] :to [row 1] :merged false}])\n         [0 0 a b] (cond (can-merge a b) [{:from [row 2] :to [row 0] :merged false}\n                                          {:from [row 3] :to [row 0] :merged true}]\n                         :else   [{:from [row 2] :to [row 0] :merged false}\n                                  {:from [row 3] :to [row 1] :merged false}])\n         ; 3 tiles\n         [a b c 0] (cond (can-merge a b) [{:from [row 1] :to [row 0] :merged true}\n                                          {:from [row 2] :to [row 1] :merged false}]\n                         (can-merge b c) [{:from [row 2] :to [row 1] :merged true}]\n                         :else nil)\n         [a b 0 c] (cond (can-merge a b) [{:from [row 1] :to [row 0] :merged true}\n                                          {:from [row 3] :to [row 1] :merged false}]\n                         (can-merge b c) {:from [row 3] :to [row 1] :merged true}\n                         :else {:from [row 3] :to [row 2] :merged false})\n         [a 0 b c] (cond (can-merge a b) [{:from [row 2] :to [row 0] :merged true}\n                                          {:from [row 3] :to [row 1] :merged false}]\n                         (can-merge b c) [{:from [row 2] :to [row 1] :merged false}\n                                          {:from [row 3] :to [row 1] :merged true}]\n                         :else [{:from [row 2] :to [row 1] :merged false}\n                                {:from [row 3] :to [row 2] :merged false}]) \n         [0 a b c] (cond (can-merge a b) [{:from [row 1] :to [row 0] :merged false}\n                                          {:from [row 2] :to [row 0] :merged true}\n                                          {:from [row 3] :to [row 1] :merged false}]\n                         (can-merge b c) [{:from [row 1] :to [row 0] :merged false}\n                                          {:from [row 2] :to [row 1] :merged false}\n                                          {:from [row 3] :to [row 1] :merged true}]\n                         :else [{:from [row 1] :to [row 0] :merged false}\n                                {:from [row 2] :to [row 1] :merged false}\n                                {:from [row 3] :to [row 2] :merged false}])\n         ; 4 tiles\n         [a b c d] (cond (can-merge a b)\n                         (cond (can-merge c d) [{:from [row 1] :to [row 0] :merged true}\n                                                {:from [row 2] :to [row 1] :merged false}\n                                                {:from [row 3] :to [row 1] :merged true}]\n                               :else [{:from [row 1] :to [row 0] :merged true}\n                                      {:from [row 2] :to [row 1] :merged false}\n                                      {:from [row 3] :to [row 2] :merged false}])\n                         (can-merge b c) [{:from [row 2] :to [row 1] :merged true}\n                                          {:from [row 3] :to [row 2] :merged false}]\n                         (can-merge c d) {:from [row 3] :to [row 2] :merged true}\n                         :else nil)))\n\n(defn sub3 [n] (- 3 n))\n(defn fix-right [transform]\n  (-> transform\n      (update-in [:from 1] sub3)\n      (update-in [:to 1] sub3)))\n(defn fix-up [transform]\n  (let [[fr fc] (:from transform)\n        [tr tc] (:to transform)]\n    (-> transform\n        (assoc :from [fc fr])\n        (assoc :to [tc tr]))))\n    \n(defn transpose [m]\n  (apply mapv vector m))\n\n(transpose [[1 1 0 0] \n            [2 2 0 0] \n            [3 3 0 0] \n            [4 4 0 0]])\n\n(defn generate-board-moves [board direction]\n    (case direction\n             :left (flatten (filter identity (map-indexed (fn [idx row] (generate-row-moves row idx)) board)))\n             :right (map fix-right (flatten (filter identity (map-indexed (fn [idx row] (generate-row-moves row idx)) (map reverse board)))))\n             :up (map fix-up (flatten (filter identity (map-indexed (fn [idx row] (generate-row-moves row idx)) (transpose board)))))\n             :down (map fix-up (map fix-right (flatten (filter identity (map-indexed (fn [idx row] (generate-row-moves row idx)) (map reverse (transpose board)))))))))\n"]}