{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["app.core/init-board","cljs.core/vec","iter__5523__auto__","s__32525","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__32527","cljs.core/chunk-buffer","i__32526","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32524","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","s__32529","b__32531","i__32530","iter__32528","s__32533","b__32535","i__32534","iter__32532","j","refx.alpha.reg_event_db","_","db","tile-list","cljs.core/flatten","empty-slots","p1__32536#","cljs.core.filter","picked-tile","cljs.core/rand-nth","rowcoord","colcoord","newtileval","newkey","cljs.core/assoc-in","cljs.core.update_in","cljs.core/inc","p__32537","vec__32538","cljs.core.nth","map__32541","cljs.core/--destructure-map","cljs.core.get","from","to","merged","vec__32542","vec__32545","fromrow","fromcol","torow","tocol","fromtile","cljs.core.get_in","oldval","reposed-from","cljs.core.assoc","newdb","refx.alpha.reg_event_fx","p__32548","p__32549","map__32550","vec__32551","cofx","dir","moves","app.merge/generate-board-moves","slides","cljs.core.mapv","movedata","effects","cljs.core.conj","refx.alpha.reg_sub","props__27040__auto__","clj-props__27041__auto__","uix.core/glue-args","vec__32554","map__32557","f__27042__auto__","js/goog.DEBUG","app.core/swipe-detector","f__26980__auto__","*current-component*-orig-val__32564","uix.core/*current-component*","*current-component*-temp-val__32565","cljs.core/map?","js/Error","js/window","js/window.uix","js/window.uix.dev","sig__26989__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","children","vec__32558","vec__32561","x","set-x!","uix.core/use-state","y","set-y!","uix.compiler.alpha/component-element","js/shadow.js.shim.module$react_native.View","e","event","new-x","new-y","dx","dy","adx","js/Math.abs","ady","xthresh","ythresh","refx.alpha/dispatch","vec__32566","map__32569","app.core/tile","*current-component*-orig-val__32571","*current-component*-temp-val__32572","tileinfo","key","scale","pos-x","pos-y","tileval","springs","js/shadow.js.shim.module$$react_spring$three.useSpring","js/shadow.js.shim.module$$react_spring$three.animated.mesh","uix.compiler.aot/>el","fexpr__32570","f__27038__auto__","app.core/board","*current-component*-orig-val__32578","*current-component*-temp-val__32579","board","refx.alpha/use-sub","tiles","p1__32573#","s__32575","b__32577","i__32576","iter__32574","app.core/root","*current-component*-orig-val__32580","*current-component*-temp-val__32581","js/shadow.js.shim.module$$react_three$fiber$native.Canvas","js/shadow.js.shim.module$$react_three$drei.PerspectiveCamera","app.core/init","refx.alpha/dispatch-sync","js/shadow.js.shim.module$expo.registerRootComponent","cljs.core/chunk-first"],"sourcesContent":["(ns app.core\n  (:require [react-native :as rn]\n            [\"expo\" :as expo]\n            [uix.core :refer [$ defui] :as uix]\n            [\"@react-three/fiber/native\" :as r3f]\n            [\"@react-three/drei\" :as r3d]\n            [\"@react-spring/three\" :as rs]\n            [refx.alpha :as rfx]\n            [app.merge :as m]))\n\n(defn init-board []\n  (vec (for [i (range 4)] (vec (for [j (range 4)] {:tileval 0 :tilekey (+ (* 4 i) j) :pos-x j :pos-y i})))))\n\n(rfx/reg-event-db\n  :initialize\n  (fn [_ _]\n    {:board (init-board)\n     :keynum 16}))\n\n(rfx/reg-event-db\n  :add-random-tile\n  (fn [db _]\n    (let [tile-list (flatten (:board db))\n          empty-slots (filter #(zero? (:tileval %)) tile-list)]\n      (if (seq empty-slots)\n        (let [picked-tile (rand-nth empty-slots)\n                    rowcoord (:pos-y picked-tile)\n                    colcoord (:pos-x picked-tile)\n                    newtileval (rand-nth [2 2 2 2 2 2 2 2 2 4])\n                    newkey (:keynum db)]\n          #_(js/console.log \"new: \" #js [rowcoord colcoord])\n          (-> db\n                 (assoc-in [:board rowcoord colcoord :tileval] newtileval)\n                 (assoc-in [:board rowcoord colcoord :tilekey] newkey)\n                 (update-in [:keynum] inc)))\n        db))))\n\n(rfx/reg-event-db\n  :slide\n  (fn [db [_ {:keys [from to merged]}]] \n      (let [[fromrow fromcol] from\n              [torow tocol]     to\n              fromtile  (get-in db [:board fromrow fromcol])\n              oldval (:tileval fromtile)\n              reposed-from (-> fromtile\n                               (assoc :pos-x tocol)\n                               (assoc :pos-y torow))\n              newkey (db :keynum)\n              newdb (-> db\n                             (assoc-in [:board torow tocol] reposed-from)\n                             (assoc-in [:board fromrow fromcol :tileval] 0)\n                             (assoc-in [:board fromrow fromcol :tilekey] newkey)\n                             (update-in [:keynum] inc))]\n        (if merged\n          (-> newdb\n              (assoc-in [:board torow tocol :tileval] (* 2 oldval)))\n          newdb))))\n\n \n(rfx/reg-event-fx\n  :move\n  (fn [{:keys [db] :as cofx} [_ dir]]\n    (let [moves (m/generate-board-moves (:board db) dir)\n          slides (if (seq moves)\n                   (mapv (fn [movedata] [:dispatch [:slide movedata]]) moves)\n                   [])\n          effects (conj slides [:dispatch [:add-random-tile]])]\n      #_(js/console.log (clj->js moves))\n      {:db db\n       :fx #_slides effects}))) \n\n(rfx/reg-sub\n  :board\n  (fn [db _]\n    (:board db)))\n\n\n\n(defui swipe-detector [{:keys [children]}]\n  (let [[x set-x!] (uix/use-state 0.0) \n        [y set-y!] (uix/use-state 0.0)]\n    ($ rn/View {:style {:width \"100%\"\n                        :height \"100%\"}\n                :on-touch-start (fn [^js e]\n                                  (let [event (.-nativeEvent e)\n                                        new-x (.-pageX event)\n                                        new-y (.-pageY event)]\n                                    (set-x! new-x)\n                                    (set-y! new-y)))\n                :on-touch-end (fn [^js e]\n                                (let [dx (- (.. e -nativeEvent -pageX) x)\n                                      dy (- (.. e -nativeEvent -pageY) y)\n                                      adx (js/Math.abs dx)\n                                      ady (js/Math.abs dy)\n                                      xthresh 50\n                                      ythresh 50]\n                                  #_(js/console.log \"dx: \" dx \", dy: \" dy)\n                                  (if (or (> adx xthresh) (> ady ythresh))\n                                    (if (> adx ady)\n                                        ;horizontal swipes\n                                        (if (pos? dx)\n                                           ;right\n                                           (rfx/dispatch [:move :right])\n                                           ;left\n                                           (rfx/dispatch [:move :left]))\n                                        ;vertical swipes\n                                        (if (pos? dy)\n                                          ;down\n                                          (rfx/dispatch [:move :down])\n                                          ;up\n                                          (rfx/dispatch [:move :up]))))))}\n       children)))\n\n(defui tile [{:keys [tileinfo key]}]\n  (let [scale 1.2\n        pos-x (:pos-x tileinfo)\n        pos-y (:pos-y tileinfo)\n        tileval (:tileval tileinfo)\n        springs (rs/useSpring #js {:position #js [#_(:pos-x tileinfo)(* scale (- (- (:pos-x tileinfo) 0) 1.5))\n                                                  #_(:pos-y tileinfo)(* scale (- (- 3 (:pos-y tileinfo)) 1.5))\n                                                  0]\n                                   :config #js {:mass 1\n                                                :tension 600\n                                                :friction 30}})]\n    ($ rs/animated.mesh {:key key\n                         :position (.-position springs)} \n        ($ :boxGeometry)\n        ($ :meshStandardMaterial {:color ({2    \"#f18c55\"\n                                           4    \"#de7033\"\n                                           8    \"#ca5310\"\n                                           16   \"#ad3c0e\"\n                                           32   \"#9e310d\"\n                                           64   \"#8f250c\"\n                                           128  \"#691e06\"\n                                           256  \"#441e15\"\n                                           512  \"#311e1d\"\n                                           1024 \"#1e1e24\"\n                                           2048 \"#000000\"} tileval)}))))\n\n(defui board []\n  (let [board (rfx/use-sub [:board])\n        tiles (->> board\n                    flatten\n                    (filter #(not (zero? (:tileval %)))))]\n    (for [tileinfo tiles]\n      ($ tile {:key (:tilekey tileinfo) :tileinfo tileinfo}))))\n\n(defui root []\n  ($ swipe-detector\n     ($ r3f/Canvas #_{:frameloop \"demand\"}\n        ($ :ambientLight {:intensity 1.57})\n        ($ r3d/PerspectiveCamera {:makeDefault true \n                                  :rotation #js [0 0 0]\n                                  :position #js [0 0 12]})\n        #_($ :mesh\n             ($ :boxGeometry {:args #js [1 1 1]})\n             ($ :meshStandardMaterial {:color \"orange\"}))\n        ($ board))))\n\n(defn ^:export init []\n  (rfx/dispatch-sync [:initialize])\n  (expo/registerRootComponent root))\n"]}