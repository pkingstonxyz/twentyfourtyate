{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["app.core/init-board","cljs.core/vec","iter__5523__auto__","s__28570","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__28572","cljs.core/chunk-buffer","i__28571","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28569","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","s__28574","b__28576","i__28575","iter__28573","s__28578","b__28580","i__28579","iter__28577","j","refx.alpha.reg_event_fx","_","app.core/tiles-by-probabilities","probabilities","cljs.core.mapcat","p__28581","vec__28582","cljs.core.nth","k","v","cljs.core.repeat","refx.alpha.reg_event_db","db","tile-list","cljs.core/flatten","empty-slots","p1__28585#","cljs.core.filter","picked-tile","cljs.core/rand-nth","rowcoord","colcoord","possible-tiles","newtileval","newkey","cljs.core/assoc-in","cljs.core.update_in","cljs.core/inc","p__28587","vec__28588","map__28591","cljs.core/--destructure-map","cljs.core.get","from","to","merged","vec__28592","vec__28595","fromrow","fromcol","torow","tocol","fromtile","cljs.core.get_in","oldval","reposed-from","cljs.core.assoc","newkeyfrom","newdb","p1__28586#","cljs.core.update","app.core/update-frozen-db","should-be-frozen-after?","cljs.core/dec","app.core/update-random-db","should-be-fixed-after?","app.core/add-tile-if-not-frozen","effects","frozen?","or__5045__auto__","cljs.core.conj","p__28598","p__28599","map__28600","vec__28601","cofx","dir","moves","app.merge/generate-board-moves","slides","cljs.core.mapv","movedata","app.core/remove-tile","pos-x","pos-y","p__28604","vec__28605","vec__28608","p__28611","vec__28612","vec__28615","p__28618","vec__28619","vec__28622","p__28625","vec__28626","vec__28629","app.core/handle-swap","tile-1-coords","vec__28632","t1x","t1y","tile-1","tile-2","moved-tile-1","moved-tile-2","p__28635","vec__28636","vec__28639","can-remove?","can-swap?","tileval","js/console.log","cljs.core/clj->js","G__28642","cljs.core._EQ_","refx.alpha.reg_sub","props__27040__auto__","clj-props__27041__auto__","uix.core/glue-args","vec__28643","map__28646","f__27042__auto__","js/goog.DEBUG","app.core/swipe-detector","f__26980__auto__","*current-component*-orig-val__28653","uix.core/*current-component*","*current-component*-temp-val__28654","cljs.core/map?","js/Error","js/window","js/window.uix","js/window.uix.dev","sig__26989__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","children","vec__28647","vec__28650","x","set-x!","uix.core/use-state","y","set-y!","uix.compiler.alpha/component-element","js/shadow.js.shim.module$react_native.View","e","event","new-x","new-y","dx","dy","adx","js/Math.abs","ady","xthresh","ythresh","refx.alpha/dispatch","app.core/AnimatedModel","js/shadow.js.shim.module$$react_spring$three.animated","js/module$js$meshes.Model","vec__28655","map__28658","app.core/tile","*current-component*-orig-val__28661","*current-component*-temp-val__28662","tileinfo","key","scale","springs","js/shadow.js.shim.module$$react_spring$three.useSpring","transition","js/shadow.js.shim.module$$react_spring$three.useTransition","G__28659","uix.compiler.attributes/interpret-props","G__28660","cljs.core/Keyword","f__27038__auto__","app.core/totalMoves","*current-component*-orig-val__28663","*current-component*-temp-val__28664","movecount","refx.alpha/use-sub","js/shadow.js.shim.module$react_native.Text","app.core/score-board","*current-component*-orig-val__28665","*current-component*-temp-val__28666","score","app.core/ui","*current-component*-orig-val__28667","*current-component*-temp-val__28668","js/shadow.js.shim.module$react_native.StatusBar","app.core/reset-button","*current-component*-orig-val__28669","*current-component*-temp-val__28670","uix.compiler.aot/>el","uix.compiler.attributes/interpret-attrs","app.core/board","*current-component*-orig-val__28676","*current-component*-temp-val__28677","board","tiles","s__28673","b__28675","i__28674","iter__28672","app.core/root","*current-component*-orig-val__28678","*current-component*-temp-val__28679","js/shadow.js.shim.module$$react_three$fiber$native.Canvas","js/shadow.js.shim.module$$react_three$drei$native.PerspectiveCamera","js/shadow.js.shim.module$react.Suspense","app.core/init","refx.alpha/dispatch-sync","js/shadow.js.shim.module$expo.registerRootComponent","cljs.core/chunk-first"],"sourcesContent":["(ns app.core\n  (:require [react :as r]\n            [react-native :as rn]\n            [\"expo\" :as expo]\n            [uix.core :refer [$ defui] :as uix]\n            [\"@react-three/fiber/native\" :as r3f]\n            [\"@react-three/drei/native\" :as r3d]\n            [\"@react-spring/three\" :as rs]\n            [refx.alpha :as rfx]\n            [app.merge :as m]\n            [\"../js/test\" :as t]\n            [\"../js/meshes\" :as meshes]))\n(defn init-board []\n  (vec (for [i (range 4)] (vec (for [j (range 4)] {:tileval 0 :tilekey (+ (* 4 i) j) :pos-x j :pos-y i})))))\n\n(rfx/reg-event-fx\n  :initialize\n  (fn [_ _]\n    {:db {:board (init-board)\n          :keynum 16\n          :movecount 0\n          :score 0\n          :frozen? false\n          :frozen-moves-left 0\n          :can-remove? false\n          :swap {:can-swap? false\n                 :tile-1-pos nil}\n          :base-probabilities {2 90\n                               4 6\n                               :freeze 0\n                               :remove 0\n                               :swap 0\n                               :random 0}\n          :fixed-probabilities {2 1}\n          :fixed-randomness? false\n          :fixed-random-moves-left 0}\n     :fx [[:dispatch [:add-random-tile]]\n          [:dispatch [:add-random-tile]]]}))\n\n(defn tiles-by-probabilities [probabilities]\n  (mapcat (fn [[k v]] (repeat v k)) probabilities))\n\n(rfx/reg-event-db\n  :add-random-tile\n  (fn [db _]\n    (let [tile-list (flatten (:board db))\n          empty-slots (filter #(zero? (:tileval %)) tile-list)]\n      (if (seq empty-slots)\n        (let [picked-tile (rand-nth empty-slots)\n              rowcoord (:pos-y picked-tile)\n              colcoord (:pos-x picked-tile)\n              possible-tiles (tiles-by-probabilities (if (:fixed-randomness? db)\n                                                       (:fixed-probabilities db)\n                                                       (:base-probabilities db)))\n              newtileval (rand-nth possible-tiles)\n              newkey (:keynum db)]\n          (-> db\n                 (assoc-in [:board rowcoord colcoord :tileval] newtileval)\n                 (assoc-in [:board rowcoord colcoord :tilekey] newkey)\n                 (update-in [:keynum] inc)))\n        db))))\n\n(rfx/reg-event-db\n  :slide\n  (fn [db [_ {:keys [from to merged]}]] \n      (let [[fromrow fromcol] from\n              [torow tocol]     to\n              fromtile  (get-in db [:board fromrow fromcol])\n              oldval (:tileval fromtile)\n              reposed-from (-> fromtile\n                               (assoc :pos-x tocol)\n                               (assoc :pos-y torow))\n              newkeyfrom (db :keynum)\n              newdb (-> db\n                             (assoc-in [:board torow tocol] reposed-from)\n                             (assoc-in [:board fromrow fromcol :tileval] 0)\n                             (assoc-in [:board fromrow fromcol :tilekey] newkeyfrom)\n                             (update-in [:keynum] inc))]\n        (if merged\n          (-> newdb\n              (assoc-in [:board torow tocol :tileval] (* 2 oldval))\n              (update :score #(+ % (* 2 oldval))))\n          newdb))))\n \n(defn update-frozen-db [db]\n  (if (:frozen? db)\n    (let [should-be-frozen-after? (> (:frozen-moves-left db) 1)]\n      (-> db\n          (assoc :frozen? should-be-frozen-after?)\n          (update :frozen-moves-left dec)\n          ;undo the movecount increase lmao\n          (update :movecount dec)))\n    db))\n(defn update-random-db [db]\n  (if (:fixed-randomness? db)\n    (let [should-be-fixed-after? (> (:fixed-random-moves-left db) 1)]\n      (-> db\n          (assoc :fixed-randomness? should-be-fixed-after?)\n          (update :fixed-random-moves-left dec)))\n    db))\n\n(defn add-tile-if-not-frozen [effects frozen?] \n  (if (or frozen? (zero? (count effects)))\n    effects\n    (conj effects [:dispatch [:add-random-tile]])))\n\n(rfx/reg-event-fx\n  :move\n  (fn [{:keys [db] :as cofx} [_ dir]]\n    (let [moves (m/generate-board-moves (:board db) dir)\n          slides (if (seq moves)\n                   (mapv (fn [movedata] [:dispatch [:slide movedata]]) moves)\n                   [])\n          effects (-> slides\n                      (add-tile-if-not-frozen (:frozen? db)))\n          #_#_effects (conj slides [:dispatch [:add-random-tile]])\n          newdb (-> db\n                    (update :movecount inc)\n                    update-frozen-db\n                    update-random-db)]\n      {:db newdb\n       :fx effects}))) \n\n(defn remove-tile [db pos-x pos-y]\n  (let [newkey (:keynum db)]\n    (-> db\n        (assoc-in [:board pos-y pos-x :tileval] 0)\n        (assoc-in [:board pos-y pos-x :tilekey] newkey)\n        (update :keynum inc))))\n\n(rfx/reg-event-db\n  :freeze\n  (fn [db [_ [pos-x pos-y]]]\n      (-> db\n          (remove-tile pos-x pos-y)\n          (assoc :frozen? true)\n          (assoc :frozen-moves-left 2))))\n\n(rfx/reg-event-db\n  :remove-sauce\n  (fn [db [_ [pos-x pos-y]]]\n    (-> db\n        (remove-tile pos-x pos-y)\n        (assoc :can-remove? true))))\n\n(rfx/reg-event-db\n  :random-sauce\n  (fn [db [_ [pos-x pos-y]]]\n    (-> db\n        (remove-tile pos-x pos-y)\n        (assoc :fixed-randomness? true)\n        (assoc :fixed-random-moves-left 5))))\n\n(rfx/reg-event-db\n  :swap-sauce\n  (fn [db [_ [pos-x pos-y]]]\n    (-> db\n        (remove-tile pos-x pos-y)\n        (assoc-in [:swap :can-swap?] true))))\n\n(defn handle-swap [db pos-x pos-y]\n  (let [tile-1-coords (-> db :swap :tile-1-pos)]\n    (if (some? tile-1-coords)\n      (let [[t1x t1y] tile-1-coords\n            tile-1 (get-in db [:board t1y t1x])\n            tile-2 (get-in db [:board pos-y pos-x])\n            moved-tile-1 (-> tile-1\n                             (assoc :pos-x pos-x)\n                             (assoc :pos-y pos-y))\n            moved-tile-2 (-> tile-2\n                             (assoc :pos-x t1x)\n                             (assoc :pos-y t1y))]\n        (-> db\n            (assoc-in [:board t1y t1x] moved-tile-2)\n            (assoc-in [:board pos-y pos-x] moved-tile-1)\n            (assoc-in [:swap :tile-1-pos] nil)\n            (assoc-in [:swap :can-swap?] false)))\n      (-> db\n          (assoc-in [:swap :tile-1-pos] [pos-x pos-y])))))\n\n(rfx/reg-event-db\n  :clicked\n  (fn [db [_ [pos-x pos-y]]]\n    (let [can-remove? (:can-remove? db)\n          can-swap? (-> db :swap :can-swap?)\n          tileval (get-in db [:board pos-y pos-x :tileval])]\n      (js/console.log (clj->js tileval))\n      (cond \n        can-remove? (case tileval\n                      0 db\n                      :remove db\n                      :freeze db\n                      :random db\n                      :swap db\n                      (-> db\n                           (remove-tile pos-x pos-y)\n                           (assoc :can-remove? false)))\n        can-swap? (handle-swap db pos-x pos-y)\n        :else db))))\n\n(rfx/reg-sub\n  :board\n  (fn [db _]\n    (:board db)))\n\n(rfx/reg-sub\n  :movecount\n  (fn [db _]\n    (:movecount db)))\n\n(rfx/reg-sub\n  :score\n  (fn [db _]\n    (:score db)))\n\n(defui swipe-detector [{:keys [children]}]\n  (let [[x set-x!] (uix/use-state 0.0) \n        [y set-y!] (uix/use-state 0.0)]\n    ($ rn/View {:style {:width \"100%\"\n                        :height \"100%\"}\n                :on-touch-start (fn [^js e]\n                                  (let [event (.-nativeEvent e)\n                                        new-x (.-pageX event)\n                                        new-y (.-pageY event)]\n                                    (set-x! new-x)\n                                    (set-y! new-y)))\n                :on-touch-end (fn [^js e]\n                                (let [dx (- (.. e -nativeEvent -pageX) x)\n                                      dy (- (.. e -nativeEvent -pageY) y)\n                                      adx (js/Math.abs dx)\n                                      ady (js/Math.abs dy)\n                                      xthresh 50\n                                      ythresh 50]\n                                  #_(js/console.log \"dx: \" dx \", dy: \" dy)\n                                  (if (or (> adx xthresh) (> ady ythresh))\n                                    (if (> adx ady)\n                                        ;horizontal swipes\n                                        (if (pos? dx)\n                                           ;right\n                                           (rfx/dispatch [:move :right])\n                                           ;left\n                                           (rfx/dispatch [:move :left]))\n                                        ;vertical swipes\n                                        (if (pos? dy)\n                                          ;down\n                                          (rfx/dispatch [:move :down])\n                                          ;up\n                                          (rfx/dispatch [:move :up]))))))}\n       children)))\n\n(def AnimatedModel (rs/animated meshes/Model))\n(defui tile [{:keys [tileinfo key]}]\n  (let [scale 1.3\n        pos-x (:pos-x tileinfo)\n        pos-y (:pos-y tileinfo)\n        tileval (:tileval tileinfo)\n        springs (rs/useSpring #js {:position #js [(* scale (- (- (:pos-x tileinfo) 0) 1.5))\n                                                  (* scale (- (- 3 (:pos-y tileinfo)) 1.5))\n                                                  0]\n                                   :config #js {:mass 1\n                                                :tension 1000\n                                                :friction 30}})\n        #_#_transition (rs/useTransition (:tileval tileinfo))\n        transition (rs/useTransition (:tileval tileinfo)\n                                     #js {:from #js {:scale 0.5}\n                                          :enter #js {:scale 1}\n                                          #_#_:leave #js {:scale 0.5}\n                                          :config #js {:mass 1\n                                                       :tension 600\n                                                       :friction 30}})]\n    (transition (fn [scale _]\n                  ($ AnimatedModel #js {:key key\n                                        :position (.-position springs)\n                                        :scale (.-scale scale)\n                                        :rotation #js [(/ 3.14159 2) 0 0]\n                                        :onClick (fn [_]\n                                                   (case tileval\n                                                     :freeze (rfx/dispatch [:freeze [pos-x pos-y]])\n                                                     :remove (rfx/dispatch [:remove-sauce [pos-x pos-y]])\n                                                     :swap   (rfx/dispatch [:swap-sauce [pos-x pos-y]])\n                                                     :random (rfx/dispatch [:random-sauce [pos-x pos-y]])\n                                                     (rfx/dispatch [:clicked [pos-x pos-y]])))\n                                        :val tileval})))) \n  #_(let [scale 1.2\n          pos-x (:pos-x tileinfo)\n          pos-y (:pos-y tileinfo)\n          tileval (:tileval tileinfo)\n          springs (rs/useSpring #js {:position #js [(* scale (- (- (:pos-x tileinfo) 0) 1.5))\n                                                    (* scale (- (- 3 (:pos-y tileinfo)) 1.5))\n                                                    0]\n                                     :config #js {:mass 1\n                                                  :tension 1000\n                                                  :friction 30}})\n          transition (rs/useTransition (:tileval tileinfo)\n                                       #js {:from #js {:scale 0.5}\n                                            :enter #js {:scale 1}\n                                            :leave #js {:scale 0}\n                                            :config #js {:mass 1\n                                                         :tension 600\n                                                         :friction 30}})]\n      (transition (fn [scale item]\n                    ($ rs/animated.mesh {:key key\n                                         :position (.-position springs)\n                                         :scale (.-scale scale)\n                                         :onClick (fn [_]\n                                                    (case tileval\n                                                      :freeze (rfx/dispatch [:freeze [pos-x pos-y]])\n                                                      :remove (rfx/dispatch [:remove-sauce [pos-x pos-y]])\n                                                      :swap   (rfx/dispatch [:swap-sauce [pos-x pos-y]])\n                                                      :random (rfx/dispatch [:random-sauce [pos-x pos-y]])\n                                                      (rfx/dispatch [:clicked [pos-x pos-y]])))}\n                             ($ :boxGeometry)\n                             ($ :meshStandardMaterial {:color ({0    \"#ffffff\"\n                                                                2    \"#c86a6d\"\n                                                                4    \"#cc6b3e\"\n                                                                8    \"#e19c3d\"\n                                                                16   \"#b7a852\"\n                                                                32   \"#9cb36b\"\n                                                                64   \"#89a990\"\n                                                                128  \"#709997\"\n                                                                256  \"#6494aa\"\n                                                                512  \"#967fad\"\n                                                                1024 \"#c769b0\"\n                                                                2048 \"#000000\"\n                                                                :freeze \"#0000ff\"\n                                                                :remove \"#ff0000\"\n                                                                :swap   \"#ffff00\"\n                                                                :random \"#00ff00\"} tileval)}))))))\n\n(defui totalMoves []\n  (let [movecount (rfx/use-sub [:movecount])]\n    ($ rn/Text {:style {:font-size 60}}\n       (str \"Moves: \" movecount))))\n\n(defui score-board []\n  (let [score (rfx/use-sub [:score])]\n    ($ rn/Text {:style {:font-size 60}}\n       (str \"Score: \" score))))\n\n(defui ui []\n  ($ rn/View #js {:style #js {:position \"absolute\"\n                              :top 0\n                              :left 0\n                              :width \"100%\"\n                              :height \"100%\"}}\n     ($ rn/StatusBar)\n     ($ rn/View #js {:style #js {:margin-top 10\n                                  :margin-left 10\n                                  :margin-right 10\n                                  :height \"20%\"}}\n        ($ rn/View #js {:style #js {:flex 1\n                                           :flexDirection \"column\"\n                                           :justifyContent \"center\"\n                                           :alignItems \"center\"}}\n           ($ totalMoves)\n           ($ score-board)))))\n        \n\n(defui reset-button []\n  ($ :mesh {:onClick (fn [_]\n                       (rfx/dispatch [:initialize]))\n            :position #js [0 -3.5 0]}\n     ($ :boxGeometry)\n     ($ :meshStandardMaterial #js {:color \"#22aa22\"}))) \n\n\n(defui board []\n  (let [board (rfx/use-sub [:board])\n        tiles (->> board\n                    flatten\n                    #_(filter #(not (zero? (:tileval %)))))]\n    (for [tileinfo tiles]\n      ($ tile {:key (:tilekey tileinfo) :tileinfo tileinfo}))))\n\n(defui root []\n  ($ swipe-detector\n      ($ r3f/Canvas #_{:frameloop \"demand\"}\n          ($ :ambientLight #js {:intensity 2})\n          ($ :pointLight #js {:position #js [0 0 12]\n                              :intensity 100})\n          ($ r3d/PerspectiveCamera #js {:makeDefault true \n                                        :rotation #js [0 0 0]\n                                        :position #js [0 0 12]})\n          ($ r/Suspense\n             ($ board))\n          ($ reset-button)\n          #_($ r/Suspense\n               ($ meshes/Model \n                  #js {:position #js [0 0 1]\n                       :rotation #js [(/ 3.1415 2) 0 0]\n                       :val 32})))\n                \n      ($ ui)))\n        \n\n(defn ^:export init []\n  (rfx/dispatch-sync [:initialize])\n  (expo/registerRootComponent root))\n"]}