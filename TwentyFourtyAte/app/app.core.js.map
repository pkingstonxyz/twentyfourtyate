{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["app.core/init-board","cljs.core/vec","iter__5523__auto__","s__33174","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__33176","cljs.core/chunk-buffer","i__33175","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33173","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","s__33178","b__33180","i__33179","iter__33177","s__33182","b__33184","i__33183","iter__33181","j","refx.alpha.reg_event_fx","_","refx.alpha.reg_event_db","db","tile-list","cljs.core/flatten","empty-slots","p1__33185#","cljs.core.filter","picked-tile","cljs.core/rand-nth","rowcoord","colcoord","newtileval","newkey","cljs.core/assoc-in","cljs.core.update_in","cljs.core/inc","p__33186","vec__33187","cljs.core.nth","map__33190","cljs.core/--destructure-map","cljs.core.get","from","to","merged","vec__33191","vec__33194","fromrow","fromcol","torow","tocol","fromtile","cljs.core.get_in","oldval","reposed-from","cljs.core.assoc","newdb","p__33197","p__33198","map__33199","vec__33200","cofx","dir","moves","app.merge/generate-board-moves","slides","cljs.core.mapv","movedata","effects","cljs.core.conj","cljs.core.update","p__33204","vec__33205","delta","p1__33203#","refx.alpha.reg_sub","props__27040__auto__","clj-props__27041__auto__","uix.core/glue-args","vec__33208","map__33211","f__27042__auto__","js/goog.DEBUG","app.core/swipe-detector","f__26980__auto__","*current-component*-orig-val__33218","uix.core/*current-component*","*current-component*-temp-val__33219","cljs.core/map?","js/Error","js/window","js/window.uix","js/window.uix.dev","sig__26989__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","children","vec__33212","vec__33215","x","set-x!","uix.core/use-state","y","set-y!","uix.compiler.alpha/component-element","js/shadow.js.shim.module$react_native.View","e","event","new-x","new-y","dx","dy","adx","js/Math.abs","ady","xthresh","ythresh","refx.alpha/dispatch","vec__33220","map__33223","app.core/tile","*current-component*-orig-val__33226","*current-component*-temp-val__33227","tileinfo","key","scale","pos-x","pos-y","tileval","springs","js/shadow.js.shim.module$$react_spring$three.useSpring","transition","js/shadow.js.shim.module$$react_spring$three.useTransition","G__33224","item","js/shadow.js.shim.module$$react_spring$three.animated.mesh","uix.compiler.aot/>el","fexpr__33225","f__27038__auto__","app.core/totalMoves","*current-component*-orig-val__33228","*current-component*-temp-val__33229","movecount","refx.alpha/use-sub","js/shadow.js.shim.module$react_native.Text","app.core/ui","*current-component*-orig-val__33230","*current-component*-temp-val__33231","js/shadow.js.shim.module$react_native.StatusBar","app.core/reset-button","*current-component*-orig-val__33232","*current-component*-temp-val__33233","app.core/board","*current-component*-orig-val__33239","*current-component*-temp-val__33240","board","tiles","p1__33234#","s__33236","b__33238","i__33237","iter__33235","app.core/root","*current-component*-orig-val__33241","*current-component*-temp-val__33242","js/shadow.js.shim.module$$react_three$fiber$native.Canvas","js/shadow.js.shim.module$$react_three$drei$native.PerspectiveCamera","app.core/init","refx.alpha/dispatch-sync","js/shadow.js.shim.module$expo.registerRootComponent","cljs.core/chunk-first"],"sourcesContent":["(ns app.core\n  (:require [react :as r]\n            [react-native :as rn]\n            [\"expo\" :as expo]\n            [uix.core :refer [$ defui] :as uix]\n            [\"@react-three/fiber/native\" :as r3f]\n            [\"@react-three/drei/native\" :as r3d]\n            [\"@react-spring/three\" :as rs]\n            [refx.alpha :as rfx]\n            [app.merge :as m]))\n\n(defn init-board []\n  (vec (for [i (range 4)] (vec (for [j (range 4)] {:tileval 0 :tilekey (+ (* 4 i) j) :pos-x j :pos-y i})))))\n\n(rfx/reg-event-fx\n  :initialize\n  (fn [_ _]\n    {:db {:board (init-board)\n          :keynum 16\n          :movecount 0}\n     :fx [[:dispatch [:add-random-tile]]\n          [:dispatch [:add-random-tile]]]}))\n\n(rfx/reg-event-db\n  :add-random-tile\n  (fn [db _]\n    (let [tile-list (flatten (:board db))\n          empty-slots (filter #(zero? (:tileval %)) tile-list)]\n      (if (seq empty-slots)\n        (let [picked-tile (rand-nth empty-slots)\n                    rowcoord (:pos-y picked-tile)\n                    colcoord (:pos-x picked-tile)\n                    newtileval (rand-nth [2 2 2 2 2 2 2 2 2 4])\n                    newkey (:keynum db)]\n          #_(js/console.log \"new: \" #js [rowcoord colcoord])\n          (-> db\n                 (assoc-in [:board rowcoord colcoord :tileval] newtileval)\n                 (assoc-in [:board rowcoord colcoord :tilekey] newkey)\n                 (update-in [:keynum] inc)))\n        db))))\n\n(rfx/reg-event-db\n  :slide\n  (fn [db [_ {:keys [from to merged]}]] \n      (let [[fromrow fromcol] from\n              [torow tocol]     to\n              fromtile  (get-in db [:board fromrow fromcol])\n              oldval (:tileval fromtile)\n              reposed-from (-> fromtile\n                               (assoc :pos-x tocol)\n                               (assoc :pos-y torow))\n              newkey (db :keynum)\n              newdb (-> db\n                             (assoc-in [:board torow tocol] reposed-from)\n                             (assoc-in [:board fromrow fromcol :tileval] 0)\n                             (assoc-in [:board fromrow fromcol :tilekey] newkey)\n                             (update-in [:keynum] inc))]\n        (if merged\n          (-> newdb\n              (assoc-in [:board torow tocol :tileval] (* 2 oldval)))\n          newdb))))\n\n \n(rfx/reg-event-fx\n  :move\n  (fn [{:keys [db] :as cofx} [_ dir]]\n    (let [moves (m/generate-board-moves (:board db) dir)\n          slides (if (seq moves)\n                   (mapv (fn [movedata] [:dispatch [:slide movedata]]) moves)\n                   [])\n          effects (conj slides [:dispatch [:add-random-tile]])]\n      #_(js/console.log (clj->js moves))\n      {:db (update db :movecount inc)\n       :fx #_slides effects}))) \n\n(rfx/reg-event-db\n  :inctime\n  (fn [db [_ delta]]\n    (update db :gametime #(+ delta %))))\n\n(rfx/reg-sub\n  :board\n  (fn [db _]\n    (:board db)))\n\n(rfx/reg-sub\n  :movecount\n  (fn [db _]\n    (:movecount db)))\n\n(defui swipe-detector [{:keys [children]}]\n  (let [[x set-x!] (uix/use-state 0.0) \n        [y set-y!] (uix/use-state 0.0)]\n    ($ rn/View {:style {:width \"100%\"\n                        :height \"100%\"}\n                :on-touch-start (fn [^js e]\n                                  (let [event (.-nativeEvent e)\n                                        new-x (.-pageX event)\n                                        new-y (.-pageY event)]\n                                    (set-x! new-x)\n                                    (set-y! new-y)))\n                :on-touch-end (fn [^js e]\n                                (let [dx (- (.. e -nativeEvent -pageX) x)\n                                      dy (- (.. e -nativeEvent -pageY) y)\n                                      adx (js/Math.abs dx)\n                                      ady (js/Math.abs dy)\n                                      xthresh 50\n                                      ythresh 50]\n                                  #_(js/console.log \"dx: \" dx \", dy: \" dy)\n                                  (if (or (> adx xthresh) (> ady ythresh))\n                                    (if (> adx ady)\n                                        ;horizontal swipes\n                                        (if (pos? dx)\n                                           ;right\n                                           (rfx/dispatch [:move :right])\n                                           ;left\n                                           (rfx/dispatch [:move :left]))\n                                        ;vertical swipes\n                                        (if (pos? dy)\n                                          ;down\n                                          (rfx/dispatch [:move :down])\n                                          ;up\n                                          (rfx/dispatch [:move :up]))))))}\n       children)))\n\n(defui tile [{:keys [tileinfo key]}]\n  (let [scale 1.2\n        pos-x (:pos-x tileinfo)\n        pos-y (:pos-y tileinfo)\n        tileval (:tileval tileinfo)\n        springs (rs/useSpring #js {:position #js [(* scale (- (- (:pos-x tileinfo) 0) 1.5))\n                                                  (* scale (- (- 3 (:pos-y tileinfo)) 1.5))\n                                                  0]\n                                   :config #js {:mass 1\n                                                :tension 600\n                                                :friction 30}})\n        transition (rs/useTransition (:tileval tileinfo)\n                                     #js {:from #js {:scale 0.5}\n                                          :enter #js {:scale 1}\n                                          :leave #js {:scale 0}\n                                          :config #js {:mass 1\n                                                       :tension 600\n                                                       :friction 30}})]\n    (transition (fn [scale item]\n                  ($ rs/animated.mesh {:key key\n                                       :position (.-position springs)\n                                       :scale (.-scale scale)} \n                           ($ :boxGeometry)\n                           ($ :meshStandardMaterial {:color ({2    \"#c86a6d\"\n                                                              4    \"#cc6b3e\"\n                                                              8    \"#e19c3d\"\n                                                              16   \"#b7a852\"\n                                                              32   \"#9cb36b\"\n                                                              64   \"#89a990\"\n                                                              128  \"#709997\"\n                                                              256  \"#6494aa\"\n                                                              512  \"#967fad\"\n                                                              1024 \"#c769b0\"\n                                                              2048 \"#000000\"} tileval)}))))))\n\n(defui totalMoves []\n  (let [movecount (rfx/use-sub [:movecount])]\n    ($ rn/Text {:style {:font-size 60}}\n       (str \"Moves: \" movecount))))\n\n(defui ui []\n  ($ rn/View {:style {:position \"absolute\"\n                      :top 0\n                      :left 0\n                      :width \"100%\"\n                      :height \"100%\"}}\n     ($ rn/StatusBar)\n     ($ rn/View {:style {:margin-top 10\n                         :margin-left 10\n                         :margin-right 10\n                         :height \"20%\"}}\n        ($ rn/View {:style {:flex 1\n                            :flexDirection \"column\"\n                            :justifyContent \"center\"\n                            :alignItems \"center\"}}\n           ($ totalMoves)))))\n        \n\n(defui reset-button []\n            :onClick (fn [_] \n                       (rfx/dispatch [:initialize]))\n     ($ :meshStandardMaterial {:color \"#22aa22\"}) \n     ($ :meshStandardMaterial {:color \"#22aa22\"}) \n     ($ :meshStandardMaterial {:color \"#22aa22\"})) \n       \n(defui board []\n  (let [board (rfx/use-sub [:board])\n        tiles (->> board\n                    flatten\n                    (filter #(not (zero? (:tileval %)))))]\n    (for [tileinfo tiles]\n      ($ tile {:key (:tilekey tileinfo) :tileinfo tileinfo}))))\n\n(defui root []\n  ($ swipe-detector\n    ($ r3f/Canvas #_{:frameloop \"demand\"}\n        ($ :ambientLight {:intensity 3})\n        ($ r3d/PerspectiveCamera {:makeDefault true \n                                  :rotation #js [0 0 0]\n                                  :position #js [0 0 12]})\n        ($ board)\n        ($ reset-button))\n    ($ ui)))\n        \n\n(defn ^:export init []\n  (rfx/dispatch-sync [:initialize])\n  (expo/registerRootComponent root))\n"]}