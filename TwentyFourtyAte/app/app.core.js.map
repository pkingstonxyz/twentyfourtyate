{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["app.core/init-board","cljs.core/vec","iter__5523__auto__","s__32765","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__32767","cljs.core/chunk-buffer","i__32766","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32764","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","s__32769","b__32771","i__32770","iter__32768","s__32773","b__32775","i__32774","iter__32772","j","refx.alpha.reg_event_fx","_","app.core/tiles-by-probabilities","probabilities","cljs.core.mapcat","p__32776","vec__32777","cljs.core.nth","k","v","cljs.core.repeat","app.core/possible-tiles","refx.alpha.reg_event_db","db","tile-list","cljs.core/flatten","empty-slots","p1__32780#","cljs.core.filter","picked-tile","cljs.core/rand-nth","rowcoord","colcoord","newtileval","newkey","cljs.core/assoc-in","cljs.core.update_in","cljs.core/inc","p__32782","vec__32783","map__32786","cljs.core/--destructure-map","cljs.core.get","from","to","merged","vec__32787","vec__32790","fromrow","fromcol","torow","tocol","fromtile","cljs.core.get_in","oldval","reposed-from","cljs.core.assoc","newkeyfrom","newdb","p1__32781#","cljs.core.update","app.core/update-frozen-db","should-be-frozen-after?","cljs.core/dec","app.core/add-tile-if-not-frozen","effects","frozen?","cljs.core.conj","p__32793","p__32794","map__32795","vec__32796","cofx","dir","moves","app.merge/generate-board-moves","slides","cljs.core.mapv","movedata","app.core/remove-tile","pos-x","pos-y","p__32799","vec__32800","vec__32803","p__32806","vec__32807","vec__32810","p__32813","vec__32814","vec__32817","can-remove?","refx.alpha.reg_sub","props__27040__auto__","clj-props__27041__auto__","uix.core/glue-args","vec__32820","map__32823","f__27042__auto__","js/goog.DEBUG","app.core/swipe-detector","f__26980__auto__","*current-component*-orig-val__32830","uix.core/*current-component*","*current-component*-temp-val__32831","cljs.core/map?","js/Error","js/window","js/window.uix","js/window.uix.dev","sig__26989__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","children","vec__32824","vec__32827","x","set-x!","uix.core/use-state","y","set-y!","uix.compiler.alpha/component-element","js/shadow.js.shim.module$react_native.View","e","event","new-x","new-y","dx","dy","adx","js/Math.abs","ady","xthresh","ythresh","refx.alpha/dispatch","vec__32832","map__32835","app.core/tile","*current-component*-orig-val__32839","*current-component*-temp-val__32840","tileinfo","key","scale","tileval","springs","js/shadow.js.shim.module$$react_spring$three.useSpring","transition","js/shadow.js.shim.module$$react_spring$three.useTransition","G__32836","item","js/shadow.js.shim.module$$react_spring$three.animated.mesh","G__32837","cljs.core/Keyword","uix.compiler.aot/>el","fexpr__32838","f__27038__auto__","app.core/totalMoves","*current-component*-orig-val__32841","*current-component*-temp-val__32842","movecount","refx.alpha/use-sub","js/shadow.js.shim.module$react_native.Text","app.core/score-board","*current-component*-orig-val__32843","*current-component*-temp-val__32844","score","app.core/ui","*current-component*-orig-val__32845","*current-component*-temp-val__32846","js/shadow.js.shim.module$react_native.StatusBar","app.core/reset-button","*current-component*-orig-val__32847","*current-component*-temp-val__32848","app.core/board","*current-component*-orig-val__32854","*current-component*-temp-val__32855","board","tiles","s__32851","b__32853","i__32852","iter__32850","app.core/root","*current-component*-orig-val__32856","*current-component*-temp-val__32857","js/shadow.js.shim.module$$react_three$fiber$native.Canvas","js/shadow.js.shim.module$$react_three$drei$native.PerspectiveCamera","app.core/init","refx.alpha/dispatch-sync","js/shadow.js.shim.module$expo.registerRootComponent","cljs.core/chunk-first"],"sourcesContent":["(ns app.core\n  (:require [react :as r]\n            [react-native :as rn]\n            [\"expo\" :as expo]\n            [uix.core :refer [$ defui] :as uix]\n            [\"@react-three/fiber/native\" :as r3f]\n            [\"@react-three/drei/native\" :as r3d]\n            [\"@react-spring/three\" :as rs]\n            [refx.alpha :as rfx]\n            [app.merge :as m]))\n\n(defn init-board []\n  (vec (for [i (range 4)] (vec (for [j (range 4)] {:tileval 0 :tilekey (+ (* 4 i) j) :pos-x j :pos-y i})))))\n\n(rfx/reg-event-fx\n  :initialize\n  (fn [_ _]\n    {:db {:board (init-board)\n          :keynum 16\n          :movecount 0\n          :score 0\n          :frozen? false\n          :frozen-moves-left 0\n          :can-remove? false}\n     :fx [[:dispatch [:add-random-tile]]\n          [:dispatch [:add-random-tile]]]}))\n\n(defn tiles-by-probabilities [probabilities]\n  (mapcat (fn [[k v]] (repeat v k)) probabilities))\n\n(def possible-tiles\n  (tiles-by-probabilities {2 90\n                           4 8\n                           :freeze 1\n                           :remove 1}))\n(rfx/reg-event-db\n  :add-random-tile\n  (fn [db _]\n    (let [tile-list (flatten (:board db))\n          empty-slots (filter #(zero? (:tileval %)) tile-list)]\n      (if (seq empty-slots)\n        (let [picked-tile (rand-nth empty-slots)\n              rowcoord (:pos-y picked-tile)\n              colcoord (:pos-x picked-tile)\n              newtileval (rand-nth possible-tiles)\n              newkey (:keynum db)]\n          (-> db\n                 (assoc-in [:board rowcoord colcoord :tileval] newtileval)\n                 (assoc-in [:board rowcoord colcoord :tilekey] newkey)\n                 (update-in [:keynum] inc)))\n        db))))\n\n(rfx/reg-event-db\n  :slide\n  (fn [db [_ {:keys [from to merged]}]] \n      (let [[fromrow fromcol] from\n              [torow tocol]     to\n              fromtile  (get-in db [:board fromrow fromcol])\n              oldval (:tileval fromtile)\n              reposed-from (-> fromtile\n                               (assoc :pos-x tocol)\n                               (assoc :pos-y torow))\n              newkeyfrom (db :keynum)\n              newdb (-> db\n                             (assoc-in [:board torow tocol] reposed-from)\n                             (assoc-in [:board fromrow fromcol :tileval] 0)\n                             (assoc-in [:board fromrow fromcol :tilekey] newkeyfrom)\n                             (update-in [:keynum] inc))]\n        (if merged\n          (-> newdb\n              (assoc-in [:board torow tocol :tileval] (* 2 oldval))\n              (update :score #(+ % (* 2 oldval))))\n          newdb))))\n \n(defn update-frozen-db [db]\n  (if (:frozen? db)\n    (let [should-be-frozen-after? (> (:frozen-moves-left db) 1)]\n      (-> db\n          (assoc :frozen? should-be-frozen-after?)\n          (update :frozen-moves-left dec)))\n    db))\n\n(defn add-tile-if-not-frozen [effects frozen?] \n  (if frozen? \n    effects\n    (conj effects [:dispatch [:add-random-tile]])))\n\n(rfx/reg-event-fx\n  :move\n  (fn [{:keys [db] :as cofx} [_ dir]]\n    (let [moves (m/generate-board-moves (:board db) dir)\n          slides (if (seq moves)\n                   (mapv (fn [movedata] [:dispatch [:slide movedata]]) moves)\n                   [])\n          effects (-> slides\n                      (add-tile-if-not-frozen (:frozen? db)))\n          #_#_effects (conj slides [:dispatch [:add-random-tile]])\n          newdb (-> db\n                    (update :movecount inc)\n                    update-frozen-db)]\n      {:db newdb\n       :fx effects}))) \n\n(defn remove-tile [db pos-x pos-y]\n  (let [newkey (:keynum db)]\n    (-> db\n        (assoc-in [:board pos-y pos-x :tileval] 0)\n        (assoc-in [:board pos-y pos-x :tilekey] newkey)\n        (update :keynum inc))))\n\n(rfx/reg-event-db\n  :freeze\n  (fn [db [_ [pos-x pos-y]]]\n      (-> db\n          (remove-tile pos-x pos-y)\n          (assoc :frozen? true)\n          (assoc :frozen-moves-left 2))))\n\n(rfx/reg-event-db\n  :remove-sauce\n  (fn [db [_ [pos-x pos-y]]]\n    (-> db\n        (remove-tile pos-x pos-y)\n        (assoc :can-remove? true))))\n\n(rfx/reg-event-db\n  :remove\n  (fn [db [_ [pos-x pos-y]]]\n    (let [newkey (:keynum db)\n          can-remove? (:can-remove? db)]\n      (if can-remove?\n        (-> db\n                   (assoc-in [:board pos-y pos-x :tileval] 0)\n                   (assoc-in [:board pos-y pos-x :tilekey] newkey)\n                   (update :keynum inc)\n                   (assoc :can-remove? false))\n        db))))\n\n(rfx/reg-sub\n  :board\n  (fn [db _]\n    (:board db)))\n\n(rfx/reg-sub\n  :movecount\n  (fn [db _]\n    (:movecount db)))\n\n(rfx/reg-sub\n  :score\n  (fn [db _]\n    (:score db)))\n\n(defui swipe-detector [{:keys [children]}]\n  (let [[x set-x!] (uix/use-state 0.0) \n        [y set-y!] (uix/use-state 0.0)]\n    ($ rn/View {:style {:width \"100%\"\n                        :height \"100%\"}\n                :on-touch-start (fn [^js e]\n                                  (let [event (.-nativeEvent e)\n                                        new-x (.-pageX event)\n                                        new-y (.-pageY event)]\n                                    (set-x! new-x)\n                                    (set-y! new-y)))\n                :on-touch-end (fn [^js e]\n                                (let [dx (- (.. e -nativeEvent -pageX) x)\n                                      dy (- (.. e -nativeEvent -pageY) y)\n                                      adx (js/Math.abs dx)\n                                      ady (js/Math.abs dy)\n                                      xthresh 50\n                                      ythresh 50]\n                                  #_(js/console.log \"dx: \" dx \", dy: \" dy)\n                                  (if (or (> adx xthresh) (> ady ythresh))\n                                    (if (> adx ady)\n                                        ;horizontal swipes\n                                        (if (pos? dx)\n                                           ;right\n                                           (rfx/dispatch [:move :right])\n                                           ;left\n                                           (rfx/dispatch [:move :left]))\n                                        ;vertical swipes\n                                        (if (pos? dy)\n                                          ;down\n                                          (rfx/dispatch [:move :down])\n                                          ;up\n                                          (rfx/dispatch [:move :up]))))))}\n       children)))\n\n(defui tile [{:keys [tileinfo key]}]\n  (let [scale 1.2\n        pos-x (:pos-x tileinfo)\n        pos-y (:pos-y tileinfo)\n        tileval (:tileval tileinfo)\n        springs (rs/useSpring #js {:position #js [(* scale (- (- (:pos-x tileinfo) 0) 1.5))\n                                                  (* scale (- (- 3 (:pos-y tileinfo)) 1.5))\n                                                  0]\n                                   :config #js {:mass 1\n                                                :tension 1000\n                                                :friction 30}})\n        transition (rs/useTransition (:tileval tileinfo)\n                                     #js {:from #js {:scale 0.5}\n                                          :enter #js {:scale 1}\n                                          :leave #js {:scale 0}\n                                          :config #js {:mass 1\n                                                       :tension 600\n                                                       :friction 30}})]\n    (transition (fn [scale item]\n                  ($ rs/animated.mesh {:key key\n                                       :position (.-position springs)\n                                       :scale (.-scale scale)\n                                       :onClick (fn [_]\n                                                  (case tileval\n                                                    :freeze (rfx/dispatch [:freeze [pos-x pos-y]])\n                                                    :remove (rfx/dispatch [:remove-sauce [pos-x pos-y]])\n                                                    (rfx/dispatch [:remove [pos-x pos-y]])))}\n                                                    \n                                                    \n                           ($ :boxGeometry)\n                           ($ :meshStandardMaterial {:color ({0    \"#ffffff\"\n                                                              2    \"#c86a6d\"\n                                                              4    \"#cc6b3e\"\n                                                              8    \"#e19c3d\"\n                                                              16   \"#b7a852\"\n                                                              32   \"#9cb36b\"\n                                                              64   \"#89a990\"\n                                                              128  \"#709997\"\n                                                              256  \"#6494aa\"\n                                                              512  \"#967fad\"\n                                                              1024 \"#c769b0\"\n                                                              2048 \"#000000\"\n                                                              :freeze \"#ccccff\"\n                                                              :remove \"#ff0000\"} tileval)}))))))\n\n(defui totalMoves []\n  (let [movecount (rfx/use-sub [:movecount])]\n    ($ rn/Text {:style {:font-size 60}}\n       (str \"Moves: \" movecount))))\n\n(defui score-board []\n  (let [score (rfx/use-sub [:score])]\n    ($ rn/Text {:style {:font-size 60}}\n       (str \"Score: \" score))))\n\n(defui ui []\n  ($ rn/View {:style {:position \"absolute\"\n                      :top 0\n                      :left 0\n                      :width \"100%\"\n                      :height \"100%\"}}\n     ($ rn/StatusBar)\n     ($ rn/View {:style {:margin-top 10\n                         :margin-left 10\n                         :margin-right 10\n                         :height \"20%\"}}\n        ($ rn/View {:style {:flex 1\n                            :flexDirection \"column\"\n                            :justifyContent \"center\"\n                            :alignItems \"center\"}}\n           ($ totalMoves)\n           ($ score-board)))))\n        \n\n(defui reset-button []\n  ($ :mesh {:onClick (fn [_]\n                       (rfx/dispatch [:initialize]))\n            :position #js [0 -3.5 0]}\n     ($ :boxGeometry)\n     ($ :meshStandardMaterial {:color \"#22aa22\"}))) \n       \n(defui board []\n  (let [board (rfx/use-sub [:board])\n        tiles (->> board\n                    flatten\n                    #_(filter #(not (zero? (:tileval %)))))]\n    (for [tileinfo tiles]\n      ($ tile {:key (:tilekey tileinfo) :tileinfo tileinfo}))))\n\n(defui root []\n  ($ swipe-detector\n    ($ r3f/Canvas #_{:frameloop \"demand\"}\n        ($ :ambientLight {:intensity 3})\n        ($ r3d/PerspectiveCamera {:makeDefault true \n                                  :rotation #js [0 0 0]\n                                  :position #js [0 0 12]})\n        ($ board)\n        ($ reset-button))\n    ($ ui)))\n        \n\n(defn ^:export init []\n  (rfx/dispatch-sync [:initialize])\n  (expo/registerRootComponent root))\n"]}