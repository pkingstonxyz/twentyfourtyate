{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["app.core/init-board","cljs.core/vec","iter__5523__auto__","s__36608","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__36610","cljs.core/chunk-buffer","i__36609","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36607","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","s__36612","b__36614","i__36613","iter__36611","s__36616","b__36618","i__36617","iter__36615","j","refx.alpha.reg_event_db","_","db","tile-list","cljs.core/flatten","empty-slots","p1__36619#","cljs.core.filter","picked-tile","cljs.core/rand-nth","rowcoord","colcoord","newval","newkey","js/console.log","cljs.core/assoc-in","cljs.core.update_in","cljs.core/inc","refx.alpha.reg_event_fx","p__36620","p__36621","map__36622","cljs.core/--destructure-map","cljs.core.get","vec__36623","cljs.core.nth","cofx","dir","moves","app.merge/generate-board-moves","refx.alpha.reg_sub","p__36626","vec__36627","idx","cljs.core.get_in","props__27040__auto__","clj-props__27041__auto__","uix.core/glue-args","vec__36630","map__36633","f__27042__auto__","js/goog.DEBUG","app.core/cube","f__26980__auto__","*current-component*-orig-val__36634","uix.core/*current-component*","*current-component*-temp-val__36635","cljs.core/map?","js/Error","js/window","js/window.uix","js/window.uix.dev","sig__26989__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","api","refx.alpha/use-sub","spring","js/shadow.js.shim.module$$react_spring$native.useSpring","uix.compiler.aot/>el","uix.compiler.attributes/keyword->string","vec__36636","map__36639","app.core/swipe-detector","*current-component*-orig-val__36646","*current-component*-temp-val__36647","children","vec__36640","vec__36643","x","set-x!","uix.core/use-state","y","set-y!","uix.compiler.alpha/component-element","js/shadow.js.shim.module$react_native.View","e","event","new-x","new-y","dx","dy","adx","js/Math.abs","ady","xthresh","ythresh","refx.alpha/dispatch","app.core/tile","tileinfo","scale","f__27038__auto__","app.core/board","*current-component*-orig-val__36649","*current-component*-temp-val__36650","board","p1__36648#","cljs.core.map","app.core/root","*current-component*-orig-val__36651","*current-component*-temp-val__36652","js/shadow.js.shim.module$$react_three$fiber$native.Canvas","js/shadow.js.shim.module$$react_three$drei.PerspectiveCamera","app.core/init","refx.alpha/dispatch-sync","js/shadow.js.shim.module$expo.registerRootComponent","cljs.core/chunk-first"],"sourcesContent":["(ns app.core\n  (:require [react-native :as rn]\n            [\"expo\" :as expo]\n            [uix.core :refer [$ defui] :as uix]\n            [\"@react-three/fiber/native\" :as r3f]\n            [\"@react-three/drei\" :as r3d]\n            [\"@react-spring/native\" :as rs]\n            [refx.alpha :as rfx]\n            [app.merge :as m]))\n\n(defn init-board []\n  (vec (for [i (range 4)] (vec (for [j (range 4)] {:val 0 :key (+ (* 4 i) j) :pos-x j :pos-y i})))))\n\n(rfx/reg-event-db\n  :initialize\n  (fn [_ _]\n    {:board (init-board)\n     :keynum 16}))\n\n(rfx/reg-event-db\n  :add-random-tile\n  (fn [db _]\n    (let [tile-list (flatten (:board db))\n          empty-slots (filter #(zero? (:val %)) tile-list)]\n      (if (seq empty-slots)\n        (let [picked-tile (rand-nth empty-slots)\n                    rowcoord (:pos-y picked-tile)\n                    colcoord (:pos-x picked-tile)\n                    newval (rand-nth [2 2 2 2 2 2 2 2 2 4])\n                    newkey (:keynum db)]\n          (js/console.log \"x: \" colcoord \", y: \" rowcoord)\n          (-> db\n                 (assoc-in [:board rowcoord colcoord :val] newval)\n                 (assoc-in [:board rowcoord colcoord :key] newkey)\n                 (update-in [:keynum] inc)))\n        db))))\n \n(rfx/reg-event-fx\n  :move\n  (fn [{:keys [db] :as cofx} [_ dir]]\n    (let [moves (m/generate-board-moves (:board db) dir)]\n      #_(js/console.log (clj->js (:board db)))\n      {:db db\n       :fx [[:dispatch [:add-random-tile]]]})))\n\n(rfx/reg-sub\n  :board\n  (fn [db _]\n    (:board db)))\n(rfx/reg-sub\n  :animation-controller\n  (fn [db [_ idx]]\n    (get-in db [:animation-controllers idx])))\n\n(defui cube [{:keys [idx]}]\n  (let [api (rfx/use-sub [:animation-controller idx])\n        spring (rs/useSpring #js {:ref api\n                                  :x 0})]\n    ($ :mesh {:position-x spring}\n      ($ :boxGeometry {:args #js [1 1 1]})\n      ($ :meshStandardMaterial {:color \"orange\"}))))\n\n\n(defui swipe-detector [{:keys [children]}]\n  (let [[x set-x!] (uix/use-state 0.0) \n        [y set-y!] (uix/use-state 0.0)]\n    ($ rn/View {:style {:width \"100%\"\n                        :height \"100%\"}\n                :on-touch-start (fn [^js e]\n                                  (let [event (.-nativeEvent e)\n                                        new-x (.-pageX event)\n                                        new-y (.-pageY event)]\n                                    (set-x! new-x)\n                                    (set-y! new-y)))\n                :on-touch-end (fn [^js e]\n                                (let [dx (- (.. e -nativeEvent -pageX) x)\n                                      dy (- (.. e -nativeEvent -pageY) y)\n                                      adx (js/Math.abs dx)\n                                      ady (js/Math.abs dy)\n                                      xthresh 50\n                                      ythresh 50]\n                                  #_(js/console.log \"dx: \" dx \", dy: \" dy)\n                                  (if (or (> adx xthresh) (> ady ythresh))\n                                    (if (> adx ady)\n                                        ;horizontal swipes\n                                        (if (pos? dx)\n                                           ;right\n                                           (rfx/dispatch [:move :right])\n                                           ;left\n                                           (rfx/dispatch [:move :left]))\n                                        ;vertical swipes\n                                        (if (pos? dy)\n                                          ;down\n                                          (rfx/dispatch [:move :down])\n                                          ;up\n                                          (rfx/dispatch [:move :up]))))))}\n       children)))\n\n(defn tile [tileinfo]\n  (let [scale 1.2]\n    ($ :mesh {:key (:key tileinfo)\n              :position #js [(* scale (- (- (:pos-x tileinfo) 0) 1.5))\n                             (* scale (- (- 3 (:pos-y tileinfo)) 1.5))\n                             0]}\n        ($ :boxGeometry)\n        ($ :meshStandardMaterial {:color \"orange\"}))))\n\n(defui board []\n  (let [board (rfx/use-sub [:board])]\n    (->> board\n        flatten\n        (filter #(not (zero? (:val %))))\n        (map tile)))) \n\n(defui root []\n  ($ swipe-detector\n     ($ r3f/Canvas\n        ($ :ambientLight {:intensity 1.57})\n        ($ r3d/PerspectiveCamera {:makeDefault true \n                                  :rotation #js [0 0 0]\n                                  :position #js [0 0 12]})\n        #_($ :mesh\n             ($ :boxGeometry {:args #js [1 1 1]})\n             ($ :meshStandardMaterial {:color \"orange\"}))\n        ($ board))))\n\n(defn ^:export init []\n  (rfx/dispatch-sync [:initialize])\n  (expo/registerRootComponent root))\n"]}